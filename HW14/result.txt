['/home/serhii/Projects/HomeWork/HW14_Task1.py', '/home/serhii/Projects/HomeWork/HW3/HW3-Lambda.py', '/home/serhii/Projects/HomeWork/HW3/HW3-string.py', '/home/serhii/Projects/HomeWork/HW3/HW3-compreh.py', '/home/serhii/Projects/HomeWork/HW3/HW3-Sort.py', '/home/serhii/Projects/HomeWork/HW3/HW3-IDandTYPE.py', '/home/serhii/Projects/HomeWork/HW8/forestV2.py', '/home/serhii/Projects/HomeWork/HW13/HW13_Task2.py', '/home/serhii/Projects/HomeWork/HW13/HW13_Task1.py', '/home/serhii/Projects/HomeWork/HW13/HW13_Task4.py', '/home/serhii/Projects/HomeWork/HW13/HW13_Task3.py', '/home/serhii/Projects/HomeWork/HW6/Garden.py', '/home/serhii/Projects/HomeWork/HW9/Task1.py', '/home/serhii/Projects/HomeWork/HW9/Task2.py', '/home/serhii/Projects/HomeWork/HW10/Test_registration.py', '/home/serhii/Projects/HomeWork/HW10/Registration.py', '/home/serhii/Projects/HomeWork/HW10/VacuumCleaner.py', '/home/serhii/Projects/HomeWork/HW10/Test_VacuumCleaner.py', '/home/serhii/Projects/HomeWork/HW7/Task1.py', '/home/serhii/Projects/HomeWork/HW7/Task3.py', '/home/serhii/Projects/HomeWork/HW7/Tast2.py', '/home/serhii/Projects/HomeWork/HW12/HW12_arg.py', '/home/serhii/Projects/HomeWork/HW4/HW4_polimor.py', '/home/serhii/Projects/HomeWork/HW4/HW4_class.py', '/home/serhii/Projects/HomeWork/HW4/HW4_magic_methods.py', '/home/serhii/Projects/HomeWork/HW5/HW5_DataClass.py', '/home/serhii/Projects/HomeWork/HW5/HW5_compos_aggreg.py', '/home/serhii/Projects/HomeWork/HW5/HW5_Method.py', '/home/serhii/Projects/HomeWork/HW11/HW11.py']

        for l in email:
        "\n\n--------------------------------------------Found pattern (for)--------------------------------------------\n")
lst_comprehension = [num // 2 if num % 2 == 0 else num * 10 for num in range(10)]
        print(f'Only {x.__class__.__name__} live in forest')
    for i in range(5):
    for line in search_by_pattern:
        for l in name:
for x in range(4):
            print(f'{forest.num}. {animal.__class__.__name__} --> {animal.__dict__}')
    for i in range(3):
for animals in (bear, wolf):
    def eat(self, forest: Forest):
        for plant in self.plants:
        for tomato in self.tomatoes:
                    for i in range(0, self.quantity):
        for line in f:
    # Iterate throw forest and force animals to eat until no predators left
# Convert (2) to regular for with if-else
for x in range(len(list_A)):
# Creating list of instances for vegetables and fruits, pests and gardener
        for l in psw:
            #             for i in range(self.quantity):
        forest.remove_animal(herbivorous)
        forest.add_animal(animal)
print("Anna has {apple} apples and {peache} peaches.".format(apple=6, peache=2))
        self.apples = [Apple(index, 'Golden', states, 'King') for index in range(1, num + 1)]
        forest.remove_animal(animal)
        for res in result:
print("Anna has {} apples and {} peaches.".format(6, 2))
#With .format and curly braces {}
d_dict = {num: num ** 2 for num in range(1, 11) if num % 2 == 1}
        # Add animals to forest
        victim = random.choice(list(forest.animals.values()))
print("Anna has {0:5} apples and {1:3} peaches.".format(6, 2))
    Make its str() representation the same as for AddressBookDataClass defined above.
        print("You called {}{}{}".format(funct.__name__, args, kwargs))
                    print(f'Only 1 {x.__class__.__name__} live in forest')
        self.tomatoes = [Tomato(index, 'Red_tomato', states, 'Cherry') for index in range(1, num + 1)]
    for item in sub.values():
#            for plant in all_plants:
# 10*. Override magic method __add__() to perform the additional action as 'multiply' (*) the value which is greater than 10. And perform this add (+) of two instances.
for x in range (10):
#8*. With indicators of field size (5 chars for the first and 3 for the second)
                print(f'{x.__class__.__name__} is in forest')
    # Create forest
    forest = Forest()
The script should read the .csv file and get the information based on your input and generate a new .csv
    search_by_pattern = find_all_files('/home/serhii/Projects/HomeWork', ['for'])
dict_comprehension = {x: x**3 for x in range(10) if x**3 % 4 == 0}
logging.basicConfig(level=logging.DEBUG, filename="test.log", filemode="a", format=log_template)
    carbonara (['forcemeat', 'tomatoes']) and bolognaise (['bacon', 'parmesan', 'eggs'])
    for i in range(random.randrange(6, 10, 1)):
        random.choice(list(forest.animals.values())).eat(forest)
        return all([apple.is_ripe() for apple in self.apples])
        if not forest.any_predator_left():
# Provide support for both positional and named arguments (your wrapper function should take both *args
        return all([tomato.is_ripe() for tomato in self.tomatoes])
dict_comprehension = {x: x**3 if x**3 % 4 == 0 else x for x in range(10)}
        for all_plants in self.plants:
         return Pasta(['forcemeat', 'tomatoes'])
lst = [num ** 2 if num % 2 == 1 else num ** 4 for num in range(10)]
for x in range(10):
            for dict_info in read:
#Convert (5) to regular for with if.
list_A_new2 = [list_A[x] + (list_B[x] - list_A[x]) for x in range(len(list_A)) ]
        for apple in self.apples:
for i in range(0, len(content), 2):
        for x in list(self.animals.values()):
        for row in read:
print("Anna has {1} apples and {0} peaches.".format(6, 2))
for num in range(10):
for i in range(len(list_1)):
        for x in args:
        for robot in self.robots:
for num in range(1, 11):
result_pool2 = ([pool.apply(defined, args=(list_a[x], list_b[x])) for x in range(4)])
        for i in range(self.limit):
        for animal in forest:
pasta_1 = Pasta(['forcemeat', 'tomatoes'])
# Convert (6) to regular for with if-else.
d_dict = {num: num ** 2 if num % 2 == 1 else num // 0.5 for num in range(1, 11)}
# make a tuple of it and by using for call their action using the same method.
